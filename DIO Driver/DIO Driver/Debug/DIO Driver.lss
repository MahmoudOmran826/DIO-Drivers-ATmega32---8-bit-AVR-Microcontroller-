
DIO Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000794  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060f  00000000  00000000  00000994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030f  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000012b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d4  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initBtnDriver>:
#include "dataTypeConversion.h"
#include "registers.h"
#include "button_driver.h"
void initBtnDriver(){
	//PORTC_Data=0x00;
	PORTC_Data_Direction=0x00;
  6c:	14 ba       	out	0x14, r1	; 20
  6e:	08 95       	ret

00000070 <readBtn>:
	
}

uint8_t readBtn(){
	return PORTC_Read;
  70:	83 b3       	in	r24, 0x13	; 19
  72:	08 95       	ret

00000074 <initLedDriver>:
#include "led_driver.h"
#include "dataTypeConversion.h"
#include "registers.h"

void initLedDriver(){
	PORTA_Data_Direction=0x01;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	8a bb       	out	0x1a, r24	; 26
  78:	08 95       	ret

0000007a <ledStatus>:
//	PORTA_Data=0x00;
}

uint8_t ledStatus(){
	return PORTA_Read;
  7a:	89 b3       	in	r24, 0x19	; 25
}
  7c:	08 95       	ret

0000007e <switchLedOn>:
uint8_t switchLedOn(){
	PORTA_Data=0x01;
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	8b bb       	out	0x1b, r24	; 27
	return PORTA_Data;
  82:	8b b3       	in	r24, 0x1b	; 27
}
  84:	08 95       	ret

00000086 <switchLedOff>:
uint8_t switchLedOff(){
	PORTA_Data=0x00;
  86:	1b ba       	out	0x1b, r1	; 27
	return PORTA_Data;
  88:	8b b3       	in	r24, 0x1b	; 27
}
  8a:	08 95       	ret

0000008c <main>:
#include "button_driver.h"
void delay(uint64_t time);
int main(void)
{
    
	initBtnDriver();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <initBtnDriver>
	initLedDriver();
  90:	0e 94 3a 00 	call	0x74	; 0x74 <initLedDriver>
    while (1) 
    {
		if (readBtn()==1)
  94:	0e 94 38 00 	call	0x70	; 0x70 <readBtn>
  98:	81 30       	cpi	r24, 0x01	; 1
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x8>
		{
			delay(3000);
			if (ledStatus()==0x01)
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <ledStatus>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	21 f4       	brne	.+8      	; 0xac <main+0x20>
			{delay(1000);
				PORTA_Data=switchLedOff();
  a4:	0e 94 43 00 	call	0x86	; 0x86 <switchLedOff>
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	f4 cf       	rjmp	.-24     	; 0x94 <main+0x8>
			}else
			{delay(1000);
				 PORTA_Data=switchLedOn();
  ac:	0e 94 3f 00 	call	0x7e	; 0x7e <switchLedOn>
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x8>

000000b4 <_exit>:
  b4:	f8 94       	cli

000000b6 <__stop_program>:
  b6:	ff cf       	rjmp	.-2      	; 0xb6 <__stop_program>
